name: Validate MR to Develop

on:
  push:
    branches:
      - develop
      - tests
  pull_request:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: write

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        pip install --upgrade -r src/requirements-dev.txt

    - name: Lint code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

    - name: Run unit tests
      env:
        RABBITMQ_URI: ${{ secrets.RABBITMQ_URI }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      run: |
        pytest --cov=src src/tests/ci --cov-report=xml:src/tests/ci/coverage.xml

    - name: Checking code vulnerabilities
      run: |
        bandit -r .

  build:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/tests'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Restore pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install setuptools
      run: |
        python -m pip install --upgrade --force-reinstall pip setuptools
          
    - name: Build project
      run: |
        python setup.py sdist bdist_wheel
        ls dist/  # Verifica los artefactos generados

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/tests'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Tag
      run: |
        git tag v1.0.0
        git push origin v1.0.0
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*
        asset_name: my-python-project-${{ github.sha }}.tar.gz
        asset_content_type: application/gzip
